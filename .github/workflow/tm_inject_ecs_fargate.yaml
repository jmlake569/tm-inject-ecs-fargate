name: ECS Fargate Trend Inject

on:
  workflow_dispatch:
    inputs:
      filter_keywords:
        description: "Comma-separated list of keywords to filter task definitions"
        required: true
        default: "keyword1,keyword2,keyword3"

env:
  AWS_DEFAULT_REGION: us-east-1

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  process_task_definitions:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.AWS_GH_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Fetch and filter task definitions
        run: |
          aws ecs list-task-definitions --query 'taskDefinitionArns[*]' --output text > all_task_definitions.txt
          keywords="${{ github.event.inputs.filter_keywords }}"
          IFS=',' read -r -a keyword_array <<< "$keywords"
          rm -f filtered_task_definitions.txt
          for keyword in "${keyword_array[@]}"; do
            grep "$keyword" all_task_definitions.txt >> filtered_task_definitions.txt
          done

      - name: Patch task definitions
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status

          PATCHER_IMAGE="trendmicrocloudone/ecs-taskdef-patcher:2.3.44"  # Replace with the correct version

          # Ensure required directories exist
          mkdir -p task_definitions container_definitions

          # Iterate over each task definition ARN
          for arn in $(cat filtered_task_definitions.txt); do
            # Fetch the current task definition JSON
            aws ecs describe-task-definition --task-definition $arn > task_definitions/task_definition.json

            # Get the family name from the task definition for naming the output file
            family_name=$(jq -r '.taskDefinition.family' task_definitions/task_definition.json)

            input_file="task_definitions/task_definition.json"
            output_file="container_definitions/task_definition.json"

            # Print the JSON content before patching
            echo "Patching file: $input_file"
            cat "$input_file"

            # Validate JSON file using jq
            if ! jq empty "$input_file"; then
              echo "Error: Invalid JSON in $input_file"
              exit 1
            fi

            # Run the Docker container to patch the task definition
            docker run --rm \
              -v "$(pwd)/task_definitions":/mnt/input \
              -v "$(pwd)/container_definitions":/mnt/output \
              $PATCHER_IMAGE \
              -i "/mnt/input/task_definition.json" \
              -o "/mnt/output/task_definition.json"

            # Check if the output file was created
            if [ ! -f "$output_file" ]; then
              echo "Error: Output file $output_file was not created."
              exit 1
            fi

            # Ensure the 'family' field is retained and essential fields are set correctly
            jq --arg family "$family_name" \
               '.family = $family | .containerDefinitions[] |= (.essential = true)' \
               "$output_file" > "patched_${family_name}.json"
          done

      - name: Register patched task definitions
        run: |
          for file in patched_*.json; do
            echo "Registering $file..."
            aws ecs register-task-definition --cli-input-json file://$file
          done
